III. Objectives
1. Project Management
1.1. Activities
1.	Initiation: Define project objectives that are specific, measurable, attainable, realistic, and time-limited (SMART). In other words, I need to identifies a problem to be solved using the ParkNexus app. 
2.	Develop a System Concept: Define the scope of the system, including a high-level schedule, cost summary, and other plans.
a.	Identify the problems, conducting research using academic documents as well as experience from potential application users (drivers, parking lots owner, â€¦) through interview and survey.
b.	Analyze the feasibility, once the problem is identified, I will analyze the following feasibility: technical feasibility (can the system be built with available technology?), economic feasibility (is the system financially viable?), and operational feasibility (will the system be accepted and used by stakeholders?).
c.	Identifying potential technical, financial, operational, and regulatory risks that may impact the success of the project.
3.	Make the project planning: In this phase, I will make most of the documents needed during the other phases of the whole project development process. Including Project Charter, WBS, Risk Management Plan, Detailed Project Schedule, Communication Plan, Resource Plan.
1.2. Outcomes
1.	The documentation that illustrates the needs defined in business terms and the overall mission of the system. 
2.	Documents made during this phase includes the System Boundary Document, Cost Benefit Analysis, Feasibility Study, and Risk Management Plan.
3.	The Project Charter that outlines the project's purpose, goals, and high-level objectives (in a way that aligns with SMART). A WBS to break the project to smaller tasks. A Risk Management Plan to describe how I will address the potential issues when doing the project. Finally, a Gantt chart and some documents to describe the communication, the resource allocation (budget) will be written.
2. Requirement Management
2.1. Activities
1.	Gather and analyze requirements from stakeholders, including drivers, parking lot owners.
2.	Prioritize requirements based on their importance and impact on the success of the project.
3.	Document requirements using techniques such as use cases, user stories, and functional specifications.
4.	Validate requirements with stakeholders to ensure accuracy, and alignment with business objectives.
2.2. Outcomes
1.	A requirements document that details the functional and non-functional requirements of the ParkNexus application.
2.	User stories and use cases that provide the description of system behavior from the perspective of end-users.
3.	Functional specifications that outline the specific features, functionality, and behavior of the application.
3. Design
3.1. Activities
1.	Develop the system architecture that defines the overall structure and components of the ParkNexus application.
2.	Create wireframes, mockups to visualize the layout, and interaction flow of the ParkNexus application.
3.	Design data models, database schemas, and data storage mechanisms to support the functionality of the ParkNexus application. Define entities, attributes, relationships, and constraints.
3.2. Outcomes
1.	Architectural diagrams, component diagrams, and deployment diagrams to illustrate the structure and relationships between system elements.
2.	User interface design, created using Figma to mockups showcase screen layouts, interactive elements, and user flows.
3.	The entity-relationship diagrams (ERDs) will be produced, also include the detailed descriptions of each data element within the database schema, including its name, data type, length, constraints, and usage.
4. Developing
4.1. Activities
1.	Technology stack selecting, consider frameworks/libraries (React, Angular, Vue.js, Flutter, or native iOS/Android) for Front-End. Select a server-side language (Python, Java, Node.js, PHP) and framework (Django, Spring Boot, Express.js) to build the API. Pick a database and also select a Cloud Services for deployment and additional services.
2.	Setup the development environment, set up Git for version tracking, configure the IDE.
3.	Codes the application based on the requirements and design. Document the codebases while developing to ensure the maintenance, and future development of the ParkNexus application.
4.2. Outcomes
1.	The codebase containing all components, modules, and functionalities of the ParkNexus application. This includes front-end code written in the chosen framework/library, back-end code implementing API endpoints.
2.	Unit test cases to validate the functionality of individual components and modules.
3.	Version-Controlled repository hosted GitHub.
4.	Codes documentation, including inline comments, README files, and developer guides for further development.
5. Testing
5.1. Activities
1.	Write test plan that outlines the strategy, objectives, scope, and resources for testing the ParkNexus application.
2.	Creating detailed test cases that cover different aspects of the application's functionality.
3.	Running the test cases to identify any issues in the application. This involves executing the tests and comparing the actual results with the expected results.
4.	Generating reports that summarize the results of the testing process.
5.2. Outcomes
1.	Test Plan, A document that outlines the testing strategy, objectives, and scope, providing guidance for the testing process.
2.	Test Cases, the instructions for executing tests and validating the application's functionality. Test Execution Results, the records of test execution, including any issues identified during testing.
3.	Test Summary Report, a report that summarizes the testing process, including test, results, and recommendations for improvement.
6. Deployment
6.1. Activities

6.2. Outcomes
